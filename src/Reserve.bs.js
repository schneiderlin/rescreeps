// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Task = require("./Task.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

var initState = {
  reservations: Belt_List.fromArray([])
};

function reserve(state, creep, resource, amount) {
  var reservation_creepName = creep.name;
  var reservation_resourceId = resource.id;
  var reservation = {
    creepName: reservation_creepName,
    resourceId: reservation_resourceId,
    amount: amount
  };
  return {
          reservations: Belt_List.add(state.reservations, reservation)
        };
}

function removeUnfulfill(state, tasks, creepNameToCreep) {
  var newR = Belt_List.keep(state.reservations, (function (reservation) {
          var name = reservation.creepName;
          var creep = Curry._1(creepNameToCreep, name);
          return Belt_Option.isSome(Belt_Option.keep(creep, (function (c) {
                            return Task.hasTask(tasks, c);
                          })));
        }));
  return {
          reservations: newR
        };
}

function dispatchTasks(state, tasks, creepNameToCreep, resourceIdToResource) {
  return Belt_List.reduce(state.reservations, [
              Belt_List.fromArray([]),
              tasks
            ], (function (param, reservation) {
                var tasks = param[1];
                var effects = param[0];
                var name = reservation.creepName;
                var creep = Curry._1(creepNameToCreep, name);
                if (creep !== undefined) {
                  Task.hasTask(tasks, creep);
                  return [
                          effects,
                          tasks
                        ];
                } else {
                  return [
                          effects,
                          tasks
                        ];
                }
              }));
}

function processState(state, tasks, creepNameToCreep, resourceIdToResource) {
  var match = dispatchTasks(state, tasks, creepNameToCreep, resourceIdToResource);
  var newTasks = match[1];
  var newState = removeUnfulfill(state, newTasks, creepNameToCreep);
  return [
          newState,
          Task.merge(tasks, newTasks),
          match[0]
        ];
}

exports.initState = initState;
exports.reserve = reserve;
exports.removeUnfulfill = removeUnfulfill;
exports.dispatchTasks = dispatchTasks;
exports.processState = processState;
/* initState Not a pure module */
