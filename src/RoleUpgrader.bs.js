// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Binding = require("./binding/Binding.bs.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

function roleUpgrader(creep) {
  if (creep.memory.upgrading && creep.store.getUsedCapacity(RESOURCE_ENERGY) === 0) {
    creep.memory.upgrading = false;
  }
  if (!creep.memory.upgrading && creep.store.getFreeCapacity(RESOURCE_ENERGY) === 0) {
    creep.memory.upgrading = true;
  }
  if (creep.memory.upgrading) {
    if (Caml_obj.caml_equal(creep.upgradeController(creep.room.controller), ERR_NOT_IN_RANGE)) {
      creep.moveTo(creep.room.controller.pos);
      return ;
    } else {
      return ;
    }
  }
  var containers = creep.room.find(107).filter(function (structure) {
        if (Caml_obj.caml_equal(structure.structureType, STRUCTURE_CONTAINER)) {
          return structure.store.getUsedCapacity(RESOURCE_ENERGY) > 500;
        } else {
          return false;
        }
      });
  var resources = creep.room.find(106);
  var candidates = containers.map(function (prim) {
          return prim;
        }).concat(resources.map(function (prim) {
            return prim;
          }));
  var target = Binding.findClosestByPath(creep.pos, candidates);
  return Belt_Option.forEach(target, (function (t) {
                if (t.TAG === /* Resource */0) {
                  var r = t._0;
                  if (Caml_obj.caml_equal(creep.pickup(r), ERR_NOT_IN_RANGE)) {
                    creep.moveTo(r.pos);
                    return ;
                  } else {
                    return ;
                  }
                }
                var s = t._0;
                if (Caml_obj.caml_equal(creep.withdraw(s, RESOURCE_ENERGY), ERR_NOT_IN_RANGE)) {
                  creep.moveTo(s.pos);
                  return ;
                }
                
              }));
}

exports.roleUpgrader = roleUpgrader;
/* No side effect */
