// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_dict = require("rescript/lib/js/js_dict.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var RoleBuilder = require("./RoleBuilder.bs.js");
var RoleUpgrader = require("./RoleUpgrader.bs.js");
var RoleHarvester = require("./RoleHarvester.bs.js");

function spawnCreeps(param) {
  var harvesters = Js_dict.values(Game.creeps).filter(function (creep) {
        return creep.memory.role === "harvester";
      });
  if (harvesters.length >= 2) {
    return ;
  }
  var newName = "Harvester" + String(Game.time);
  console.log("Spawning new harvester: ", newName);
  Game.spawns["Spawn1"].spawnCreep([
        WORK,
        CARRY,
        MOVE
      ], newName, {
        memory: {
          role: "harvester"
        }
      });
  
}

function towerDefence(param) {
  var towerOpt = Game.getObjectById("ad88e3fc2859f93aa703b852");
  var towerOpt$1 = (towerOpt == null) ? undefined : Caml_option.some(towerOpt);
  if (!Belt_Option.isSome(towerOpt$1)) {
    return ;
  }
  var closestDamagedStructure = towerOpt$1.pos.findClosestByRange(107, {
        filter: (function (structure) {
            return structure.hits < structure.hitsMax;
          })
      });
  var closestDamagedStructure$1 = (closestDamagedStructure == null) ? undefined : Caml_option.some(closestDamagedStructure);
  console.log(closestDamagedStructure$1);
  if (Belt_Option.isSome(closestDamagedStructure$1)) {
    towerOpt$1.repair(closestDamagedStructure$1);
  }
  var closestHostile = towerOpt$1.pos.findClosestByRange(103);
  var closestHostile$1 = (closestHostile == null) ? undefined : Caml_option.some(closestHostile);
  if (Belt_Option.isSome(closestHostile$1)) {
    towerOpt$1.attack(closestHostile$1);
    return ;
  }
  
}

function dispatchTask(param) {
  Object.keys(Game.creeps).forEach(function (name) {
        var creep = Game.creeps[name];
        if (creep.memory.role === "harvester") {
          RoleHarvester.roleHarvester(creep);
        }
        if (creep.memory.role === "upgrader") {
          RoleUpgrader.roleUpgrader(creep);
        }
        if (creep.memory.role === "builder") {
          return RoleBuilder.roleBuilder(creep);
        }
        
      });
  
}

function loop(param) {
  spawnCreeps(undefined);
  towerDefence(undefined);
  return dispatchTask(undefined);
}

exports.spawnCreeps = spawnCreeps;
exports.towerDefence = towerDefence;
exports.dispatchTask = dispatchTask;
exports.loop = loop;
/* No side effect */
