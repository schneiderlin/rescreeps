// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_dict = require("rescript/lib/js/js_dict.js");
var RoleMiner = require("./RoleMiner.bs.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var RoleBuilder = require("./RoleBuilder.bs.js");
var RoleRepairer = require("./RoleRepairer.bs.js");
var RoleUpgrader = require("./RoleUpgrader.bs.js");
var RoleHarvester = require("./RoleHarvester.bs.js");
var RoleTransferer = require("./RoleTransferer.bs.js");

function spawnCreeps(spawn) {
  var upgraders = Js_dict.values(Game.creeps).filter(function (creep) {
        return creep.memory.role === "upgrader";
      });
  if (upgraders.length >= 1) {
    return ;
  }
  var newName = "Upgrader" + String(Game.time);
  console.log("Spawning new upgrader: ", newName);
  spawn.spawnCreep([
        WORK,
        CARRY,
        MOVE
      ], newName, {
        memory: {
          role: "upgrader"
        }
      });
  
}

function towerDefence(param) {
  var towerOpt = Game.getObjectById("ad88e3fc2859f93aa703b852");
  var towerOpt$1 = (towerOpt == null) ? undefined : Caml_option.some(towerOpt);
  if (!Belt_Option.isSome(towerOpt$1)) {
    return ;
  }
  var closestDamagedStructure = towerOpt$1.pos.findClosestByRange(107, {
        filter: (function (structure) {
            return structure.hits < structure.hitsMax;
          })
      });
  var closestDamagedStructure$1 = (closestDamagedStructure == null) ? undefined : Caml_option.some(closestDamagedStructure);
  console.log(closestDamagedStructure$1);
  if (Belt_Option.isSome(closestDamagedStructure$1)) {
    towerOpt$1.repair(closestDamagedStructure$1);
  }
  var closestHostile = towerOpt$1.pos.findClosestByRange(103);
  var closestHostile$1 = (closestHostile == null) ? undefined : Caml_option.some(closestHostile);
  if (Belt_Option.isSome(closestHostile$1)) {
    towerOpt$1.attack(closestHostile$1);
    return ;
  }
  
}

function dispatchTask(param) {
  Object.keys(Game.creeps).forEach(function (name) {
        var creep = Game.creeps[name];
        if (creep.memory.role === "upgrader") {
          return RoleUpgrader.roleUpgrader(creep);
        }
        
      });
  
}

var minePos1 = {
  x: 5,
  y: 16
};

var minePos2 = {
  x: 13,
  y: 22
};

function mine(spawn) {
  var name1 = RoleMiner.minerName(minePos1);
  spawn.spawnCreep([
        WORK,
        WORK,
        WORK,
        MOVE
      ], name1, {
        memory: {
          role: "miner1"
        }
      });
  var name2 = RoleMiner.minerName(minePos2);
  spawn.spawnCreep([
        WORK,
        WORK,
        WORK,
        MOVE
      ], name2, {
        memory: {
          role: "miner2"
        }
      });
  Object.keys(Game.creeps).forEach(function (name) {
        var creep = Game.creeps[name];
        if (creep.memory.role === "miner1") {
          RoleMiner.roleMiner(creep, minePos1);
        }
        if (creep.memory.role === "miner2") {
          return RoleMiner.roleMiner(creep, minePos2);
        }
        
      });
  
}

function build(spawn, n) {
  var builders = Js_dict.values(Game.creeps).filter(function (creep) {
        return creep.memory.role === "builder";
      });
  if (builders.length < n) {
    var newName = "Builder" + String(Game.time);
    console.log("Spawning new Builder: ", newName);
    spawn.spawnCreep([
          WORK,
          WORK,
          CARRY,
          MOVE
        ], newName, {
          memory: {
            role: "builder"
          }
        });
  }
  var hasConstructionSite = spawn.room.find(111).length > 0;
  var hasDamagedStructure = RoleRepairer.findRepairTargets(spawn).length > 0;
  Object.keys(Game.creeps).forEach(function (name) {
        var creep = Game.creeps[name];
        if (creep.memory.role === "builder") {
          if (hasConstructionSite) {
            console.log("builder build");
            return RoleBuilder.roleBuilder(creep);
          } else if (hasDamagedStructure) {
            console.log("builder repair");
            return RoleRepairer.roleRepairer(spawn, creep);
          } else {
            console.log("builder upgrade");
            return RoleUpgrader.roleUpgrader(creep);
          }
        }
        
      });
  
}

function transfer(spawn) {
  var transferers = Js_dict.values(Game.creeps).filter(function (creep) {
        return creep.memory.role === "transferer";
      });
  if (transferers.length < 2) {
    var newName = "Transferer" + String(Game.time);
    spawn.spawnCreep([
          CARRY,
          CARRY,
          CARRY,
          MOVE
        ], newName, {
          memory: {
            role: "transferer"
          }
        });
  }
  Object.keys(Game.creeps).forEach(function (name) {
        var creep = Game.creeps[name];
        if (creep.memory.role === "transferer") {
          return RoleTransferer.roleTransferer(creep);
        }
        
      });
  
}

function harvest(spawn) {
  var harvesters = Js_dict.values(Game.creeps).filter(function (creep) {
        return creep.memory.role === "harvester";
      });
  if (harvesters.length < 2) {
    var newName = "Harvester" + String(Game.time);
    console.log("Spawning new harvester: ", newName);
    spawn.spawnCreep([
          WORK,
          CARRY,
          MOVE
        ], newName, {
          memory: {
            role: "harvester"
          }
        });
  }
  Object.keys(Game.creeps).forEach(function (name) {
        var creep = Game.creeps[name];
        if (creep.memory.role === "harvester") {
          return RoleHarvester.roleHarvester(creep);
        }
        
      });
  
}

function loop(param) {
  var spawn = Game.spawns["Spawn1"];
  transfer(spawn);
  mine(spawn);
  build(spawn, 3);
  spawnCreeps(spawn);
  towerDefence(undefined);
  return dispatchTask(undefined);
}

exports.spawnCreeps = spawnCreeps;
exports.towerDefence = towerDefence;
exports.dispatchTask = dispatchTask;
exports.minePos1 = minePos1;
exports.minePos2 = minePos2;
exports.mine = mine;
exports.build = build;
exports.transfer = transfer;
exports.harvest = harvest;
exports.loop = loop;
/* No side effect */
