// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var RoleBuilder = require("./RoleBuilder.bs.js");
var RoleUpgrader = require("./RoleUpgrader.bs.js");
var RoleHarvester = require("./RoleHarvester.bs.js");

function loop(param) {
  var towerOpt = Game.getObjectById("ad88e3fc2859f93aa703b852");
  var towerOpt$1 = (towerOpt == null) ? undefined : Caml_option.some(towerOpt);
  if (Belt_Option.isSome(towerOpt$1)) {
    var closestDamagedStructure = towerOpt$1.pos.findClosestByRange(107, {
          filter: (function (structure) {
              return structure.hits < structure.hitsMax;
            })
        });
    var closestDamagedStructure$1 = (closestDamagedStructure == null) ? undefined : Caml_option.some(closestDamagedStructure);
    console.log(closestDamagedStructure$1);
    if (Belt_Option.isSome(closestDamagedStructure$1)) {
      towerOpt$1.repair(closestDamagedStructure$1);
    }
    var closestHostile = towerOpt$1.pos.findClosestByRange(103);
    var closestHostile$1 = (closestHostile == null) ? undefined : Caml_option.some(closestHostile);
    if (Belt_Option.isSome(closestHostile$1)) {
      towerOpt$1.attack(closestHostile$1);
    }
    
  }
  Object.keys(Game.creeps).forEach(function (name) {
        var creep = Game.creeps[name];
        if (creep.memory.role === "harvester") {
          RoleHarvester.roleHarvester(creep);
        }
        if (creep.memory.role === "upgrader") {
          RoleUpgrader.roleUpgrader(creep);
        }
        if (creep.memory.role === "builder") {
          return RoleBuilder.roleBuilder(creep);
        }
        
      });
  
}

exports.loop = loop;
/* No side effect */
