// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Common = require("./Common.bs.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

function transfererName(minePos) {
  return "Transferer" + String(minePos.x) + "." + String(minePos.y);
}

function findAndTransfer(creep, allStructures, structureTypes) {
  var filteredTargets = allStructures.filter(function (structure) {
        if (Belt_Option.isSome(Caml_option.undefined_to_opt(structureTypes.find(function (t) {
                        return Caml_obj.caml_equal(structure.structureType, t);
                      })))) {
          return structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0;
        } else {
          return false;
        }
      });
  if (filteredTargets.length > 0) {
    if (Caml_obj.caml_equal(creep.transfer(Caml_array.get(filteredTargets, 0), RESOURCE_ENERGY), ERR_NOT_IN_RANGE)) {
      creep.moveTo(Caml_array.get(filteredTargets, 0).pos);
    }
    return true;
  } else {
    return false;
  }
}

function roleTransferer(creep, minePos) {
  var freeCapacity = creep.store.getFreeCapacity(RESOURCE_ENERGY);
  if (creep.memory.transfering && creep.store.getUsedCapacity(RESOURCE_ENERGY) === 0) {
    creep.memory.transfering = false;
  }
  if (!creep.memory.transfering && freeCapacity === 0) {
    creep.memory.transfering = true;
  }
  if (creep.memory.transfering) {
    var allStructures = creep.room.find(107);
    var hasTask = findAndTransfer(creep, allStructures, [
          STRUCTURE_EXTENSION,
          STRUCTURE_SPAWN
        ]);
    if (hasTask) {
      return ;
    }
    var hasTask$1 = findAndTransfer(creep, allStructures, [STRUCTURE_TOWER]);
    if (hasTask$1) {
      return ;
    }
    var hasTask$2 = findAndTransfer(creep, allStructures, [STRUCTURE_CONTAINER]);
    if (!hasTask$2) {
      findAndTransfer(creep, allStructures, [STRUCTURE_STORAGE]);
      return ;
    } else {
      return ;
    }
  }
  var targetResource = Belt_Array.get(creep.room.find(106, {
            filter: (function (resource) {
                return Common.samePosition(resource.pos, minePos);
              })
          }), 0);
  if (targetResource !== undefined) {
    return Common.pickResource(creep, targetResource);
  }
  var resources = creep.room.find(106, {
        filter: (function (resource) {
            return resource.amount > freeCapacity;
          })
      });
  var resource = creep.pos.findClosestByPath(resources);
  if (!(resource == null)) {
    return Common.pickResource(creep, resource);
  }
  
}

exports.transfererName = transfererName;
exports.findAndTransfer = findAndTransfer;
exports.roleTransferer = roleTransferer;
/* No side effect */
